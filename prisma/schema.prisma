// Prisma schema for dev-gat

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  password     String
  forename     String
  surname      String
  firstLogin   Boolean        @default(true)
  deletedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  applications Application[]
  sessions     Session[]
  AuditLog     AuditLog[]
}

model Application {
  id              String   @id @default(cuid())
  applicationName String
  siteLocation    String
  applicationType String
  proposal        String
  statusOf        String   @default("Draft")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])

  // Progress tracking fields (all optional / default to empty so legacy rows still work)
  siteBoundary        Json?
  actionPlan          Json?
  applicationQuestions Boolean[] @default([])
  plansAndDocuments   Json?
  progressWeights     Json? // { siteBoundary: number, actionPlan: number, applicationQuestions: number, plansAndDocuments: number }

  @@index([applicationName])
  @@index([statusOf])
  @@index([createdAt])
}

// Session (long-lived) tokens to support sliding auth (previously RefreshToken)
model Session {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  tokenHash    String // sha256 hash of the raw token
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  revokedAt    DateTime?
  replacedById String?
  ip           String?
  userAgent    String?
  lastUsedAt   DateTime? // updated when rotated / accessed

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  ip        String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([action])
}
